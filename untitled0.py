# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RU_dzluZqaT-XeGXtHmJ5AYS0WHcww5Y
"""

import os
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler 
from sklearn.metrics import roc_auc_score, roc_curve, accuracy_score 
import tensorflow as tf
from tensorflow.keras.layers import Dense, Dropout, BatchNormalization
from tensorflow.keras.models import Sequential

# Veri setini okuyun
df = pd.read_csv("/content/veri_seti/train.csv")

# Veri çerçevesini özellikler (X) ve hedef değişken (y) olarak bölelim
X = df.drop(['filename', 'label'], axis=1)
y = df['label']

# Hedef değişkeni kodlayın
encoder = LabelEncoder()
y = encoder.fit_transform(y)

# Özellikleri standartlaştırın
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Veriyi eğitim, doğrulama ve test setlerine ayırın
X_train, X_rem, y_train, y_rem = train_test_split(X, y, train_size=0.7)
X_valid, X_test, y_valid, y_test = train_test_split(X_rem, y_rem, test_size=0.4)

# Modeli oluşturun
model = Sequential()
model.add(Dense(64, activation='relu', input_shape=(X_train.shape[1],)))
model.add(BatchNormalization())
model.add(Dropout(0.5))
model.add(Dense(64, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.))
model.add(Dense(32, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.5))
model.add(Dense(2, activation='softmax'))

# Model özetini yazdırın
model.summary()

# Modeli derleyin
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Modeli eğitin
history = model.fit(X_train, y_train, validation_data=(X_valid, y_valid), 
                    epochs=10, batch_size=128)

# Modeli değerlendirin
test_loss, test_acc = model.evaluate(X_test, y_test, verbose=2)

import matplotlib.pyplot as plt

# Accuracy değerlerini çizdirin
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])

# Grafiğin başlığını belirleyin
plt.title('Model Doğruluk Oranı')

# x ve y eksenlerinin isimlerini belirleyin
plt.xlabel('Epok')
plt.ylabel('Doğruluk')

# Açıklama kutusunu ekleyin
plt.legend(['Eğitim', 'Doğrulama'], loc='lower right')

# Grafiği gösterin
plt.show()